<?php

namespace App\Http\Controllers;

use App\Models\Activity; // Import the Activity model to interact with the database.
use Illuminate\Http\Request; // Import the Request class to handle HTTP request data.

class HomeController extends Controller
{
    // Function to filter activities based on user-selected criteria and apply the TOPSIS algorithm for ranking.
    public function filterActivities(Request $request)
    {
        // Obtain all activities to include in ranking regardless of match
        $activityQuery = Activity::query();

        // Apply filters based on request data to limit to those meeting partial criteria
        if ($request->filled('activity_level')) {
            $activityQuery->whereIn('activity_level', $request->activity_level);
        }
        if ($request->filled('budget')) {
            $budgets = $request->budget;
            $activityQuery->where(function ($query) use ($budgets) {
                if (in_array('Under $50', $budgets)) {
                    $query->orWhere('budget', '<', 50);
                }
                if (in_array('Over $100', $budgets)) {
                    $query->orWhere('budget', '>', 100);
                }
                if (in_array('Flexible Budget', $budgets)) {
                    $query->orWhereNotNull('budget');
                }
            });
        }
        if ($request->filled('time_frame')) {
            $activityQuery->whereIn('time_frame', $request->time_frame);
        }

        // Retrieve filtered or unfiltered activities to always show as ranked
        $filteredActivities = $activityQuery->get();

        // Always prepare decision matrix with all current activities
        $decisionMatrix = $filteredActivities->map(function ($activity) {
            return [
                'budget' => $activity->budget,
                'activity_level' => $this->mapActivityLevel($activity->activity_level),
                'time_frame' => $this->mapTimeFrame($activity->time_frame),
            ];
        })->all();

        $weights = [0.4, 0.3, 0.3];
        $criteria = ['cost', 'benefit', 'benefit'];

        // Apply TOPSIS to rank the activities with those that match criteria higher
        $rankedActivities = $this->applyTopsis($filteredActivities, $decisionMatrix, $weights, $criteria);

        // Pass ranked activities to the view
        return view('Main-HomePage.ViewDiscover', ['activities' => $rankedActivities]);
    }
    /**
     * Map activity levels to numeric values for TOPSIS processing.
     */
    private function mapActivityLevel($activityLevel)
    {
        return match ($activityLevel) {
            'Low' => 1, // Low activity level is mapped to 1.
            'Medium' => 2, // Medium activity level is mapped to 2.
            'High' => 3, // High activity level is mapped to 3.
            default => 0, // Default mapping for unknown levels.
        };
    }

    /**
     * Map time frames to numeric values for TOPSIS processing.
     */
    private function mapTimeFrame($timeFrame)
    {
        return match ($timeFrame) {
            'One Week' => 1, // Short time frame is mapped to 1.
            'Two Weeks' => 2, // Medium time frame is mapped to 2.
            'One Month' => 3, // Long time frame is mapped to 3.
            default => 0, // Default mapping for unknown time frames.
        };
    }

    /**
     * Apply the TOPSIS algorithm to rank the filtered activities.
     */
    private function applyTopsis($activities, $decisionMatrix, $weights, $criteria)
    {
        $matrix = collect($decisionMatrix); // Convert decision matrix to a collection for easier manipulation.

        // Normalize the decision matrix to bring all values to the same scale.
        $normalizedMatrix = $matrix->map(function ($row) use ($matrix) {
            return [
                'budget' => $this->safeDivide($row['budget'], sqrt($matrix->sum(fn($r) => pow($r['budget'], 2)))),
                'activity_level' => $this->safeDivide($row['activity_level'], sqrt($matrix->sum(fn($r) => pow($r['activity_level'], 2)))),
                'time_frame' => $this->safeDivide($row['time_frame'], sqrt($matrix->sum(fn($r) => pow($r['time_frame'], 2)))),
            ];
        });

        // Apply weights to the normalized matrix.
        $weightedMatrix = $normalizedMatrix->map(function ($row) use ($weights) {
            return [
                'budget' => $row['budget'] * $weights[0],
                'activity_level' => $row['activity_level'] * $weights[1],
                'time_frame' => $row['time_frame'] * $weights[2],
            ];
        });

        // Determine the ideal and negative-ideal solutions.
        $ideal = [
            'budget' => $weightedMatrix->min('budget'), // Min budget for cost criterion.
            'activity_level' => $weightedMatrix->max('activity_level'), // Max activity level for benefit.
            'time_frame' => $weightedMatrix->max('time_frame'), // Max time frame for benefit.
        ];
        $negativeIdeal = [
            'budget' => $weightedMatrix->max('budget'), // Max budget for cost criterion.
            'activity_level' => $weightedMatrix->min('activity_level'), // Min activity level for benefit.
            'time_frame' => $weightedMatrix->min('time_frame'), // Min time frame for benefit.
        ];

        // Calculate separation measures from ideal and negative-ideal solutions.
        $separation = $weightedMatrix->map(function ($row) use ($ideal, $negativeIdeal) {
            $sPlus = sqrt(
                pow($row['budget'] - $ideal['budget'], 2) +
                    pow($row['activity_level'] - $ideal['activity_level'], 2) +
                    pow($row['time_frame'] - $ideal['time_frame'], 2)
            );
            $sMinus = sqrt(
                pow($row['budget'] - $negativeIdeal['budget'], 2) +
                    pow($row['activity_level'] - $negativeIdeal['activity_level'], 2) +
                    pow($row['time_frame'] - $negativeIdeal['time_frame'], 2)
            );
            return ['sPlus' => $sPlus, 'sMinus' => $sMinus];
        });

        // Calculate closeness coefficient to rank activities.
        $scores = $separation->map(fn($sep) => $this->safeDivide($sep['sMinus'], $sep['sPlus'] + $sep['sMinus']));

        // Rank activities based on closeness scores.
        $rankedActivities = $activities->zip($scores)->sortByDesc(fn($pair) => $pair[1])->map(fn($pair) => $pair[0]);

        return $rankedActivities;
    }

    /**
     * Safely divide two numbers, returning 0 if the denominator is zero.
     */
    private function safeDivide($numerator, $denominator)
    {
        return $denominator == 0 ? 0 : $numerator / $denominator;
    }
}
